# -*- mode: shell-script -*-

SOURCE="$(realpath ../src/lib/libdecorator.sh)"

prefix_cmd="
. /etc/shlib

source '$SOURCE'

"


try "

foo() {
    :cache:;
    echo \"computing...\" 1>&2;
    echo \"running foo\"
}

foo2 () {
    :test:
    echo \"running foo\"
}
decorator._find_all_fn

" "_find_all_fn should find foo with no arg decorator"
is err ""
is out "foo
foo2" TRIM
is errlvl 0


try "

foo() {
    :test: arg1 arg2
    echo \"running foo\"
}
DEBUG_BPARSE=1
decorator._find_all_fn

" "_find_all_fn should find foo simple args"
is err ""
is out "foo" TRIM
is errlvl 0



try "

wiz() {
    :xxx:
    :foo: arg1 arg2
    :bar:    a1 \
             a2 \
          \"c d\" \
          \"e
            f\"
    echo \"running foo\"
}

decorator.fn_parse_all_decorators wiz | hd

" "_find_all_fn should find foo complex args"
is err ""
is out "\
00000000  3a 78 78 78 3a 00 3a 66  6f 6f 3a 20 61 72 67 31  |:xxx:.:foo: arg1|
00000010  20 61 72 67 32 00 3a 62  61 72 3a 20 61 31 20 61  | arg2.:bar: a1 a|
00000020  32 20 22 63 20 64 22 20  22 65 0a 20 20 20 20 20  |2 \"c d\" \"e.     |
00000030  20 20 20 20 20 20 20 66  22 00 00 65 63 68 6f 20  |       f\"..echo |
00000040  22 72 75 6e 6e 69 6e 67  20 66 6f 6f 22 0a        |\"running foo\".|
0000004e
"
is errlvl 0


try "

wiz() {
    :xxx:
    if true; then
        false
    fi
}

decorator.fn_parse_all_decorators wiz | hd

" "_fn_parse_all_decorators should properly identify body as last arg"
is err ""
is out "\
00000000  3a 78 78 78 3a 00 00 69  66 20 74 72 75 65 3b 20  |:xxx:..if true; |
00000010  74 68 65 6e 0a 20 20 20  20 20 20 20 20 66 61 6c  |then.        fal|
00000020  73 65 3b 0a 20 20 20 20  66 69 0a 00 74 68 65 6e  |se;.    fi..then|
00000030  0a                                                |.|
00000031
"
is errlvl 0


try "

wiz() {
    :foo:
    echo \"running wiz: \$( printf \"=%s=, \" \"\$@\" )\"
}

decorator._mangle_fn wiz &&
declare -f wiz

" "_mangle_fn declare a new wiz and decorator no args"
is out 'wiz ()
{
    function wiz ()
    {
        echo "running wiz: $( printf "=%s=, " "$@" )"
    };
    :foo: || {
        errlvl=$?;
        err "following decorator call failed with errlvl $errlvl:"'"'
'"'"$(e :foo: | prefix "  ")";
        return $((96 + errlvl))
    };
    wiz "$@"
}' RTRIM
is errlvl 0



try "

foo() {
    :cache:;
    echo \"computing...\" 1>&2;  ## first instruction must be supported by bparse
    echo \"running foo\"
}

decorator._mangle_fn foo &&
declare -f foo

" "_mangle_fn declare a new wiz and decorator no args"
is err ""
is out 'foo ()
{
    function foo ()
    {
        echo "computing..." 1>&2;
        echo "running foo"
    };
    :cache: || {
        errlvl=$?;
        err "following decorator call failed with errlvl $errlvl:"'"'
'"'"$(e :cache: | prefix "  ")";
        return $((96 + errlvl))
    };
    foo "$@"
}' RTRIM
is errlvl 0



try "

wiz() {
    :foo: arg1 arg2
    :bar:    a1 \
             a2 \
          \"c d\" \
          \"e
            f\"
    echo \"running wiz: \$( printf \"=%s=, \" \"\$@\" )\"
}

decorator._mangle_fn wiz &&
declare -f wiz

" "_mangle_fn should declare a new wiz"
is out 'wiz ()
{
    function wiz ()
    {
        echo "running wiz: $( printf "=%s=, " "$@" )"
    };
    :foo: arg1 arg2 || {
        errlvl=$?;
        err "following decorator call failed with errlvl $errlvl:"'"'
'"'"$(e :foo: arg1 arg2 | prefix "  ")";
        return $((96 + errlvl))
    };
    :bar: a1 a2 "c d" "e
            f" || {
        errlvl=$?;
        err "following decorator call failed with errlvl $errlvl:"'"'
'"'"$(e :bar: a1 a2 "c d" "e
            f" | prefix "  ")";
        return $((96 + errlvl))
    };
    wiz "$@"
}' RTRIM
is errlvl 0



try "

:foo:() {
    echo 'FOO:' \$(printf \"=%s=, \" \"\$@\")
    fn.def wiz \"echo 'before (added by foo)' ; \$(fn.body wiz)\"
}

:bar:() {
    echo 'BAR:' \$(printf \"=%s=, \" \"\$@\")
    fn.def wiz \"\$(fn.body wiz)\"\$'\n'\"echo 'after (added by bar)'\"
}

wiz() {
    :foo: arg1 arg2
    :bar:    a1 \
             a2 \
          \"c d\" \
          \"e
            f\"
    echo \"running wiz: \$(printf \"=%s=, \" \"\$@\")\"
}

decorator._mangle_fn wiz 
wiz 1 \"2 3\"
declare -f wiz

" "mangled fn should call decorators"
is out 'FOO: =arg1=, =arg2=,
BAR: =a1=, =a2=, =c d=, =e f=,
before (added by foo)
running wiz: =1=, =2 3=,
after (added by bar)
wiz ()
{
    echo '"'before (added by foo)'"';
    echo "running wiz: $( printf "=%s=, " "$@" )";
    echo '"'after (added by bar)'"'
}' RTRIM
is errlvl 0


try "

:foo:() {
    return 1
}

wiz() {
    :foo:
    echo \"running wiz\"
}

decorator._mangle_fn wiz 
wiz

" "if decorator fails, fail function"
is err 'Error: following decorator call failed with errlvl 1:
  :foo:
' NOCOLOR
is out '' RTRIM
is errlvl 97


##
## Full example
##

teardown() { cd "$test_tmpdir"; rm -rf test1; }

## Note that ``caller`` builtin does not work in non-script. So we
## must directly test by creating a sample script.
setup() {
    cd "$test_tmpdir"; mkdir test1;
    cd test1
    cat <<EOF > foo
#!/bin/bash

. $SOURCE

:test:() {
    echo "do something with args '\$@'"
}

foo() {
    :test: arg1 arg2
    echo "running foo"
}

decorator.mangle
foo
foo  ## second time, no more execution of 'test'.
EOF

    chmod +x foo
}

try "$test_tmpdir/test1/foo" "full example"
noerror
is out "do something with args 'arg1 arg2'
running foo
running foo
"
